// Kh·ªüi t·∫°o Feather Icons
feather.replace();

// Mobile menu toggle
document.getElementById('menu-toggle').addEventListener('click', function() {
    const menu = document.getElementById('mobile-menu');
    menu.classList.toggle('hidden');
    const isHidden = menu.classList.contains('hidden');
    this.innerHTML = isHidden ? feather.icons.menu.toSvg() : feather.icons.x.toSvg();
});

// üîπ D·ªØ li·ªáu tin t·ª©c t·ª´ trang news (ƒë·ªÉ m√¥ ph·ªèng ƒë·ªìng b·ªô)
const newsData = [
    {
        title: "ƒê√† N·∫µng: Ch·ªß ƒë·ªông ·ª©ng ph√≥ thi√™n tai nh·ªØng th√°ng cu·ªëi nƒÉm",
        date: "2025-10-21",
        type: "thien-tai",
        location: "da-nang,mien-trung",
        img: "https://media.daidoanket.vn/w1280/uploaded/images/2025/10/18/8898fcf6-b66a-433c-908c-72eb18bbdeb1.jpg",
        content: "<p><strong>T√¨nh h√¨nh:</strong> TP. ƒê√† N·∫µng ƒëang h·ª©ng ch·ªãu th·ªùi ti·∫øt c·ª±c ƒëoan, m∆∞a l·ªõn k√©o d√†i g√¢y s·∫°t l·ªü nghi√™m tr·ªçng t·∫°i nhi·ªÅu khu v·ª±c. ƒê√°ng ch√∫ √Ω, b·ªù bi·ªÉn ph∆∞·ªùng H·ªôi An T√¢y b·ªã s√≥ng ƒë√°nh m·∫°nh, s·∫°t l·ªü d√†i h∆°n 200m v·ªõi v√°ch ƒë·ª©ng cao 5-6m, c√¢y ch·∫Øn s√≥ng b·∫≠t g·ªëc, c√¥ng tr√¨nh ven bi·ªÉn nguy c∆° s·ª•p ƒë·ªï.</p>"
    },
    {
        title: "Tai n·∫°n giao th√¥ng m·ªõi nh·∫•t 19/10/2025: xe c·ª©u h·ªô g√¢y tai n·∫°n li√™n ho√†n tr√™n qu·ªëc l·ªô 26",
        date: "2025-10-19",
        type: "tai-nan",
        location: "dak-lak,tp-hcm,binh-dinh,tay-nguyen",
        img: "https://cdnphoto.dantri.com.vn/fT-JEopnjSnsEkgTdgpPSX-an_8=/thumb_w/1020/2025/10/19/z7132063905158f9b65fad4a12b3160200c0a32ca66181-edited-1760843872053.jpg",
        content: "<p><strong>T√¨nh h√¨nh:</strong> Ng√†y 19/10/2025, x·∫£y ra ba v·ª• tai n·∫°n giao th√¥ng nghi√™m tr·ªçng: Xe c·ª©u h·ªô g√¢y tai n·∫°n li√™n ho√†n t·∫°i km146+400 qu·ªëc l·ªô 26 (ƒê·∫Øk L·∫Øk), ng∆∞·ªùi ƒë√†n √¥ng t·ª≠ vong do m·∫•t l√°i xe m√°y ·ªü d·ªëc c·∫ßu B√¨nh L·ª£i (TP H·ªì Ch√≠ Minh), v√† xe m√°y va ch·∫°m xe t·∫£i ch·ªü g·ªó khi·∫øn c√¥ g√°i t·ª≠ vong tr√™n t·ªânh l·ªô 639 (B√¨nh ƒê·ªãnh).</p>"
    },
    {
        title: "Thi√™n tai ƒë√£ v∆∞·ª£t qu√° s·ª©c ch·ªãu ƒë·ª±ng c·ªßa ng∆∞·ªùi d√¢n",
        date: "2025-10-10",
        type: "thien-tai",
        location: "thai-nguyen,bac-ninh,cao-bang,lang-son,mien-bac,mien-trung",
        img: "https://premedia.vneconomy.vn/files/uploads/2025/10/10/c999b83a970f40588b4d060116ebed76-20061.png?w=900",
        content: "<p><strong>T√¨nh h√¨nh:</strong> NƒÉm 2025, Vi·ªát Nam x·∫£y ra 20 lo·∫°i h√¨nh thi√™n tai v·ªõi di·ªÖn bi·∫øn d·ªìn d·∫≠p, kh·ªëc li·ªát, b·∫•t th∆∞·ªùng, v∆∞·ª£t m·ª©c l·ªãch s·ª≠, ·∫£nh h∆∞·ªüng r·ªông l·ªõn ƒë·∫øn mi·ªÅn B·∫Øc v√† mi·ªÅn Trung.</p>"
    },
    {
        title: "Vi·ªát Nam k√™u g·ªçi qu·ªëc t·∫ø h·ªó tr·ª£ kh·∫Øc ph·ª•c h·∫≠u qu·∫£ thi√™n tai",
        date: "2025-10-09",
        type: "cuu-ho",
        location: "ha-noi,mien-bac,mien-trung",
        img: "https://image.phunuonline.com.vn/fckeditor/upload/2025/20251009/images/lien-hop-quoc-keu-goi-ho-_241760006840.jpg",
        content: "<p><strong>T√¨nh h√¨nh:</strong> Trong hai th√°ng 9 v√† 10/2025, Vi·ªát Nam li√™n ti·∫øp h·ª©ng ch·ªãu b√£o s·ªë 8, 9, 10 v√† 11 c√πng m∆∞a l≈© l·ªõn. B√£o s·ªë 10 ƒë·ªï b·ªô v√†o Ngh·ªá An - H√† Tƒ©nh ƒë√™m 28 v√† r·∫°ng s√°ng 29/9 v·ªõi t·ªëc ƒë·ªô nhanh, c∆∞·ªùng ƒë·ªô m·∫°nh, ph·∫°m vi r·ªông.</p>"
    },
    {
        title: "L·ª±c l∆∞·ª£ng C√¥ng an nh√¢n d√¢n ch·ªß ƒë·ªông ·ª©ng ph√≥ v·ªõi b√£o s·ªë 12 v√† nguy c∆° m∆∞a l·ªõn",
        date: "2025-10-20",
        type: "canh-bao",
        location: "mien-trung,mien-bac",
        img: "https://dbnd.1cdn.vn/2025/10/20/dbqgxtnd202510201700-17609581259941101885533.jpg",
        content: "<p><strong>T√¨nh h√¨nh:</strong> B√£o s·ªë 12 (Fengshen) ƒëi v√†o Bi·ªÉn ƒê√¥ng chi·ªÅu 19/10/2025, s·ª©c gi√≥ c·∫•p 9 gi·∫≠t c·∫•p 11, di chuy·ªÉn h∆∞·ªõng T√¢y B·∫Øc 25km/h.</p>"
    }
];

// üîπ H√†m timeAgo (ƒë·ªìng b·ªô v·ªõi news.html)
function timeAgo(dateString) {
    const now = new Date();
    const date = new Date(dateString);
    const seconds = Math.floor((now - date) / 1000);
    
    let interval = Math.floor(seconds / 31536000);
    if (interval > 1) return `${interval} nƒÉm tr∆∞·ªõc`;
    interval = Math.floor(seconds / 2592000);
    if (interval > 1) return `${interval} th√°ng tr∆∞·ªõc`;
    interval = Math.floor(seconds / 86400);
    if (interval > 1) return `${interval} ng√†y tr∆∞·ªõc`;
    interval = Math.floor(seconds / 3600);
    if (interval > 1) return `${interval} gi·ªù tr∆∞·ªõc`;
    interval = Math.floor(seconds / 60);
    if (interval > 1) return `${interval} ph√∫t tr∆∞·ªõc`;
    return "V·ª´a xong";
}

// üîπ T·ªça ƒë·ªô trung t√¢m c√°c t·ªânh th√†nh
const provinceCoordinates = {
    'hanoi': [21.0278, 105.8342],
    'hcm': [10.8231, 106.6297],
    'danang': [16.0544, 108.2022],
    'hue': [16.4637, 107.5909],
    'nghean': [18.6796, 105.6813],
    'thanhhoa': [19.8076, 105.7766],
    'haiphong': [20.8449, 106.6881],
    'cantho': [10.0452, 105.7469],
    'sonla': [21.3257, 103.9160],
    'ninhbinh': [20.2506, 105.9745]
};

// üîπ D·ªØ li·ªáu s·ª± c·ªë m·∫´u (ƒëang x·ª≠ l√Ω v√† ƒë√£ gi·∫£i quy·∫øt)
const emergencies = [
    { 
        id: 1, 
        name: "Ch√°y nh√† d√¢n", 
        address: "S·ªë 35 Tr·∫ßn H∆∞ng ƒê·∫°o, Ho√†n Ki·∫øm, H√† N·ªôi", 
        coords: [21.027, 105.85], 
        type: "fire", 
        province: "hanoi", 
        status: "active", 
        time: "10 ph√∫t tr∆∞·ªõc", 
        description: "Ch√°y b√πng ph√°t t·∫°i t√≤a nh√† 5 t·∫ßng, ƒëang c√≥ ng∆∞·ªùi m·∫Øc k·∫πt b√™n trong. L·ª≠a b·∫Øt ƒë·∫ßu t·ª´ t·∫ßng 2 v√† ƒëang lan nhanh l√™n c√°c t·∫ßng tr√™n.",
        priority: "high",
        reporter: { name: "Nguy·ªÖn VƒÉn A", phone: "0912345678", reportTime: "14:20 15/06/2023" },
        responseTeams: [{ name: "ƒê·ªôi PCCC Qu·∫≠n Ho√†n Ki·∫øm", status: "ƒêang di chuy·ªÉn", eta: "5 ph√∫t" }],
        timeline: [{ time: "14:20", event: "Ti·∫øp nh·∫≠n b√°o c√°o s·ª± c·ªë", status: "completed" }, { time: "14:25", event: "L·ª±c l∆∞·ª£ng ƒë·∫ßu ti√™n ƒë·∫øn hi·ªán tr∆∞·ªùng", status: "in-progress" }]
    },
    { 
        id: 2, 
        name: "Ng·∫≠p l·ª•t khu d√¢n c∆∞", 
        address: "Khu v·ª±c ƒê·ªãnh C√¥ng, Ho√†ng Mai, H√† N·ªôi", 
        coords: [20.98, 105.84], 
        type: "flood", 
        province: "hanoi", 
        status: "active", 
        time: "25 ph√∫t tr∆∞·ªõc", 
        description: "Ng·∫≠p s√¢u 0.5-0.7m do m∆∞a l·ªõn k√©o d√†i. Nhi·ªÅu ph∆∞∆°ng ti·ªán b·ªã ch·∫øt m√°y, ng∆∞·ªùi d√¢n kh√¥ng th·ªÉ di chuy·ªÉn.",
        priority: "medium",
        reporter: { name: "Tr·∫ßn Th·ªã B", phone: "0923456789", reportTime: "14:05 15/06/2023" },
        responseTeams: [{ name: "ƒê·ªôi c·ª©u h·ªô Qu·∫≠n Ho√†ng Mai", status: "C√≥ m·∫∑t t·∫°i hi·ªán tr∆∞·ªùng", eta: "0 ph√∫t" }],
        timeline: [{ time: "14:05", event: "Ti·∫øp nh·∫≠n b√°o c√°o s·ª± c·ªë", status: "completed" }, { time: "14:20", event: "L·ª±c l∆∞·ª£ng ƒë·∫ßu ti√™n ƒë·∫øn hi·ªán tr∆∞·ªùng", status: "completed" }]
    },
    // Th√™m m·ªôt s·ª± c·ªë ƒë√£ gi·∫£i quy·∫øt
    { 
        id: 3, 
        name: "Tai n·∫°n giao th√¥ng tr√™n QL1A", 
        address: "Ng√£ ba V≈©ng T√†u, ƒê·ªìng Nai", 
        coords: [10.957, 106.84], 
        type: "accident", 
        province: "hcm", // g·∫ßn TPHCM
        status: "resolved", 
        time: "1 gi·ªù tr∆∞·ªõc", 
        description: "Xe container va ch·∫°m v·ªõi xe m√°y, ƒë√£ x·ª≠ l√Ω xong, giao th√¥ng th√¥ng su·ªët.",
        priority: "low",
        reporter: { name: "L√™ VƒÉn C", phone: "0934567890", reportTime: "13:00 15/06/2023" },
        responseTeams: [{ name: "CSGT ƒê·ªìng Nai", status: "Ho√†n th√†nh", eta: "0 ph√∫t" }],
        timeline: [{ time: "13:00", event: "Ti·∫øp nh·∫≠n", status: "completed" }, { time: "14:00", event: "Gi·∫£i quy·∫øt", status: "completed" }]
    }
];

// üîπ H√†m chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ news sang emergencies (t·∫°o marker t·ª´ tin t·ª©c)
function convertNewsToEmergencies(newsData) {
    const typeMapping = {
        'thien-tai': 'disaster',
        'tai-nan': 'accident', 
        'cuu-ho': 'rescue',
        'canh-bao': 'warning'
    };

    const locationMapping = {
        'ha-noi': [21.0278, 105.8342],
        'tp-hcm': [10.8231, 106.6297],
        'da-nang': [16.0544, 108.2022],
        'mien-bac': [21.5, 105.5],
        'mien-trung': [16.0, 108.0],
        'tay-nguyen': [12.0, 108.0],
        'dak-lak': [12.6667, 108.05],
        'binh-dinh': [14.1667, 109.0],
        'thai-nguyen': [21.6, 105.85],
        'toan-quoc': [16.0, 108.0]
    };
    
    // T√≠ch h·ª£p d·ªØ li·ªáu b√°o c√°o t·ª´ ng∆∞·ªùi d√πng (n·∫øu c√≥)
    const userReportsString = localStorage.getItem('newsData_user_reports');
    const userReports = userReportsString ? JSON.parse(userReportsString) : [];
    
    // L·ªçc ra c√°c tin t·ª©c th·∫≠t ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    const filteredNewsData = newsData.filter(news => !userReports.some(report => report.newsData && report.newsData.title === news.title));

    // K·∫øt h·ª£p v√† map data
    const allNews = [...filteredNewsData, ...userReports];

    return allNews.map((news, index) => {
        // N·∫øu l√† b√°o c√°o t·ª´ user, ∆∞u ti√™n location_full
        const locationKey = news.location.split(',')[0];
        const coords = locationMapping[locationKey] || [16.0, 108.0];
        
        // T·∫°o m√¥ t·∫£ ng·∫Øn t·ª´ content
        const shortDescription = news.content.replace(/<[^>]+>/g, '').substring(0, 150) + '...';
        const isUserReport = news.isUserReport;
        
        return {
            id: 1000 + index, // ID b·∫Øt ƒë·∫ßu t·ª´ 1000
            name: news.title.replace('[B√ÅO C√ÅO]', isUserReport ? '[BC Ng∆∞·ªùi D√πng]' : '[Tin T·ª©c]'),
            address: news.location_full || getAddressFromNews(news),
            coords: coords,
            type: typeMapping[news.type] || 'disaster',
            province: getProvinceCodeFromLocation(news.location),
            status: news.status || 'active', // 'active' cho tin t·ª©c/b√°o c√°o
            time: timeAgo(news.date),
            description: shortDescription,
            priority: getPriorityFromNews(news),
            reporter: {
                name: isUserReport ? news.reporter.name : 'H·ªá th·ªëng (B√°o ch√≠)',
                phone: isUserReport ? news.reporter.phone : 'N/A',
                reportTime: formatDate(news.date)
            },
            responseTeams: isUserReport 
                ? [{ name: "ƒê·ªôi ·ª©ng ph√≥ (ƒêang x√°c minh)", status: "ƒêang ƒëi·ªÅu ph·ªëi", eta: "ƒêang ch·ªù" }]
                : [{ name: "L·ª±c l∆∞·ª£ng c·ª©u h·ªô ƒë·ªãa ph∆∞∆°ng", status: "S·∫µn s√†ng", eta: "ƒêang ƒëi·ªÅu ph·ªëi" }],
            timeline: [
                { time: formatTime(news.date), event: `Ti·∫øp nh·∫≠n ${isUserReport ? 'b√°o c√°o' : 'tin t·ª©c'}`, status: "completed" },
                { time: "ƒêang c·∫≠p nh·∫≠t", event: `ƒêi·ªÅu ph·ªëi l·ª±c l∆∞·ª£ng`, status: isUserReport ? "pending" : "in-progress" }
            ],
            newsData: news // Gi·ªØ nguy√™n d·ªØ li·ªáu g·ªëc
        };
    });
}

// üîπ C√°c h√†m h·ªó tr·ª£ chuy·ªÉn ƒë·ªïi
function getAddressFromNews(news) {
    const primaryLocation = news.location.split(',')[0];
    const locationNames = {
        'ha-noi': 'H√† N·ªôi', 'tp-hcm': 'Th√†nh ph·ªë H·ªì Ch√≠ Minh', 'da-nang': 'ƒê√† N·∫µng', 'mien-bac': 'Mi·ªÅn B·∫Øc', 'mien-trung': 'Mi·ªÅn Trung',
        'tay-nguyen': 'T√¢y Nguy√™n', 'dak-lak': 'ƒê·∫Øk L·∫Øk', 'binh-dinh': 'B√¨nh ƒê·ªãnh', 'thai-nguyen': 'Th√°i Nguy√™n', 'toan-quoc': 'To√†n qu·ªëc'
    };
    return locationNames[primaryLocation] || news.location.replace(/,/g, ', ');
}

function getProvinceCodeFromLocation(location) {
    const map = {
        'ha-noi': 'hanoi', 'tp-hcm': 'hcm', 'da-nang': 'danang', 'thai-nguyen': 'thai-nguyen', 'dak-lak': 'dak-lak', 'binh-dinh': 'binh-dinh',
        'mien-bac': 'hanoi', 'mien-trung': 'danang'
    };
    const key = location.split(',')[0];
    return map[key] || 'all';
}

function getPriorityFromNews(news) {
    const priorityMap = { 'thien-tai': 'high', 'tai-nan': 'medium', 'cuu-ho': 'medium', 'canh-bao': 'high' };
    return priorityMap[news.type] || 'medium';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN') + ' ' + date.toLocaleTimeString('vi-VN', {hour: '2-digit', minute:'2-digit'});
}

function formatTime(dateString) {
    const date = new Date(dateString);
    return date.toLocaleTimeString('vi-VN', {hour: '2-digit', minute:'2-digit'});
}

// üîπ Kh·ªüi t·∫°o d·ªØ li·ªáu s·ª± c·ªë t·ªïng h·ª£p
const newsEmergencies = convertNewsToEmergencies(newsData);
const allInitialEmergencies = [...emergencies, ...newsEmergencies];

// üó∫Ô∏è Kh·ªüi t·∫°o b·∫£n ƒë·ªì Leaflet
const map = L.map("map").setView([16.0471, 108.2068], 6);
L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    maxZoom: 19,
    attribution: '&copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a>'
}).addTo(map);

let currentMarkers = [];
let currentFilters = { type: 'all', province: 'all', search: '' };

// === MAP & RENDER LOGIC ===
function showEmergencyDetail(id) {
    const emergency = allInitialEmergencies.find(e => e.id === id);
    if (!emergency) return;
    
    // Logic c·∫≠p nh·∫≠t modal (gi·ªØ nguy√™n t·ª´ code g·ªëc)
    document.getElementById('modal-id').textContent = `#${emergency.id}`;
    document.getElementById('modal-title').textContent = emergency.name;
    document.getElementById('modal-type').textContent = getTypeName(emergency.type);
    document.getElementById('modal-status').textContent = emergency.status === 'active' ? 'ƒêang x·ª≠ l√Ω' : 'ƒê√£ gi·∫£i quy·∫øt';
    document.getElementById('modal-status').className = `status-badge ${emergency.status === 'active' ? 'priority-high' : 'priority-low'}`;
    document.getElementById('modal-priority').textContent = getPriorityName(emergency.priority);
    document.getElementById('modal-priority').className = `status-badge priority-${emergency.priority}`;
    document.getElementById('modal-time').textContent = emergency.time;
    document.getElementById('modal-address').textContent = emergency.address;
    document.getElementById('modal-province').textContent = getProvinceName(emergency.province);
    document.getElementById('modal-coords').textContent = `${emergency.coords[0].toFixed(4)}, ${emergency.coords[1].toFixed(4)}`;
    document.getElementById('modal-description').textContent = emergency.description;
    document.getElementById('modal-reporter-name').textContent = emergency.reporter.name;
    document.getElementById('modal-reporter-phone').textContent = emergency.reporter.phone;
    document.getElementById('modal-report-time').textContent = emergency.reporter.reportTime;

    // Th√™m ngu·ªìn tin n·∫øu l√† t·ª´ news
    const descriptionEl = document.getElementById('modal-description');
    if (emergency.newsData) {
        const cleanContent = emergency.newsData.content.replace(/<[^>]+>/g, '');
        descriptionEl.innerHTML = emergency.description + `<br><br><strong>Ngu·ªìn tin:</strong> ${cleanContent.substring(0, 300)}...`;
    } else {
        descriptionEl.textContent = emergency.description;
    }

    // C·∫≠p nh·∫≠t l·ª±c l∆∞·ª£ng ·ª©ng ph√≥
    const responseTeamsContainer = document.getElementById('modal-response-teams');
    responseTeamsContainer.innerHTML = emergency.responseTeams.map(team => `
        <div class="flex justify-between items-center p-2 bg-white rounded border">
            <div>
                <div class="font-medium">${team.name}</div>
                <div class="text-sm text-gray-600">${team.status}</div>
            </div>
            <div class="text-sm font-semibold ${team.eta === '0 ph√∫t' || team.eta === 'ƒêang ƒëi·ªÅu ph·ªëi' || team.eta === 'ƒêang ch·ªù' ? 'text-orange-600' : 'text-green-600'}">
                ${team.eta}
            </div>
        </div>
    `).join('');

    // C·∫≠p nh·∫≠t timeline
    const timelineContainer = document.getElementById('modal-timeline');
    timelineContainer.innerHTML = emergency.timeline.map(item => `
        <div class="flex items-center space-x-3">
            <div class="flex-shrink-0 w-3 h-3 rounded-full ${
                item.status === 'completed' ? 'bg-green-500' :
                item.status === 'in-progress' ? 'bg-yellow-500 animate-pulse' : 'bg-gray-300'
            }"></div>
            <div class="flex-1">
                <div class="flex justify-between">
                    <span class="font-medium">${item.event}</span>
                    <span class="text-sm text-gray-500">${item.time}</span>
                </div>
            </div>
        </div>
    `).join('');

    document.getElementById('emergency-detail-modal').classList.remove('hidden');
    feather.replace();
}

function closeEmergencyDetail() {
    document.getElementById('emergency-detail-modal').classList.add('hidden');
}

function filterEmergencies() {
    return allInitialEmergencies.filter(emg => {
        const typeMatch = currentFilters.type === 'all' || emg.type === currentFilters.type;
        const provinceMatch = currentFilters.province === 'all' || emg.province === currentFilters.province || emg.address.toLowerCase().includes(getProvinceName(currentFilters.province).toLowerCase());
        const searchMatch = currentFilters.search === '' || 
            emg.name.toLowerCase().includes(currentFilters.search.toLowerCase()) ||
            emg.address.toLowerCase().includes(currentFilters.search.toLowerCase());
        
        return typeMatch && provinceMatch && searchMatch;
    });
}

function flyToProvince(provinceCode) {
    if (provinceCode === 'all') {
        map.flyTo([16.0471, 108.2068], 6, { duration: 1.5, easeLinearity: 0.25 });
    } else if (provinceCoordinates[provinceCode]) {
        const coords = provinceCoordinates[provinceCode];
        map.flyTo(coords, 11, { duration: 1.5, easeLinearity: 0.25 });
        
        const provinceMarker = L.marker(coords)
            .addTo(map)
            .bindPopup(`<b>${getProvinceName(provinceCode)}</b><br>ƒêang hi·ªÉn th·ªã s·ª± c·ªë trong khu v·ª±c`)
            .openPopup();
        
        setTimeout(() => { map.removeLayer(provinceMarker); }, 3000);
    }
}

function drawMarkers() {
    currentMarkers.forEach(marker => map.removeLayer(marker));
    currentMarkers = [];

    const filteredEmergencies = filterEmergencies();
    
    filteredEmergencies.forEach(emg => {
        const color = getColorByType(emg.type);
        const icon = getIconByType(emg.type);
        
        const marker = L.marker(emg.coords, {
            icon: L.divIcon({
                html: `
                    <div class="relative">
                        <div class="w-10 h-10 bg-${color}-500 rounded-full flex items-center justify-center text-white shadow-lg border-2 border-white transform hover:scale-110 transition-transform cursor-pointer ${emg.status === 'resolved' ? 'opacity-70' : ''}">
                            <span class="text-lg">${icon}</span>
                        </div>
                        ${emg.status === 'active' ? '<div class="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>' : ''}
                    </div>
                `,
                className: 'custom-marker',
                iconSize: [40, 40],
                iconAnchor: [20, 20]
            })
        })
        .addTo(map)
        .bindPopup(`
            <div class="p-3 min-w-[250px]">
                <div class="flex items-center mb-2">
                    <div class="w-6 h-6 bg-${color}-500 rounded-full flex items-center justify-center mr-2 text-white">
                        <span>${icon}</span>
                    </div>
                    <h4 class="font-bold text-gray-800">${emg.name}</h4>
                </div>
                <p class="text-sm text-gray-600 mb-2">${emg.address}</p>
                <p class="text-sm text-gray-500 mb-3 line-clamp-2">${emg.description}</p>
                <div class="flex justify-between items-center text-xs mb-3">
                    <span class="px-2 py-1 bg-${color}-100 text-${color}-700 rounded">${getTypeName(emg.type)}</span>
                    <span class="text-gray-500">${emg.time}</span>
                </div>
                <div class="mt-3 flex gap-2">
                    <button onclick="showEmergencyDetail(${emg.id})" class="flex-1 bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm transition">
                        Chi ti·∫øt
                    </button>
                    <button onclick="shareEmergency(${emg.id})" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-sm transition">
                        Chia s·∫ª
                    </button>
                </div>
            </div>
        `);

        currentMarkers.push(marker);
    });

    updateStatistics();
    updateRecentIncidents();
}

// üîπ H√†m c·∫≠p nh·∫≠t th·ªëng k√™
function updateStatistics() {
    const active = allInitialEmergencies.filter(e => e.status === 'active').length;
    const resolved = allInitialEmergencies.filter(e => e.status === 'resolved').length;
    const total = allInitialEmergencies.length;
    
    document.getElementById('active-incidents').textContent = active;
    document.getElementById('resolved-incidents').textContent = resolved;
    document.getElementById('total-incidents').textContent = total;
    
    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng theo lo·∫°i
    const typeCounts = { fire: 0, flood: 0, accident: 0, disaster: 0, rescue: 0, warning: 0 };
    allInitialEmergencies.forEach(emg => { if (typeCounts.hasOwnProperty(emg.type)) { typeCounts[emg.type]++; } });
    
    Object.keys(typeCounts).forEach(type => {
        const element = document.getElementById(`count-${type}`);
        if (element) { element.textContent = typeCounts[type]; }
    });

    // C·∫≠p nh·∫≠t th·ªùi gian
    document.getElementById('last-update').textContent = new Date().toLocaleTimeString('vi-VN');
}

// üîπ H√†m c·∫≠p nh·∫≠t danh s√°ch s·ª± c·ªë g·∫ßn ƒë√¢y
function updateRecentIncidents() {
    const container = document.getElementById('recent-incidents');
    
    // S·∫Øp x·∫øp theo ID (ID cao h∆°n l√† m·ªõi h∆°n)
    const recentEmergencies = [...allInitialEmergencies]
        .sort((a, b) => b.id - a.id)
        .slice(0, 6);
    
    container.innerHTML = recentEmergencies.map(emg => {
        const isFromNews = emg.id >= 1000;
        const typeClass = getTypeClass(emg.type);
        const icon = getIconByType(emg.type);
        
        return `
            <div class="emergency-card bg-white p-4 rounded-lg border-l-4 ${typeClass.border} hover:shadow-md transition-all cursor-pointer" 
                  onclick="showEmergencyDetail(${emg.id})">
                <div class="flex items-start justify-between mb-2">
                    <div class="flex items-center">
                        <h4 class="font-bold text-gray-800 mr-2">${emg.name}</h4>
                        ${isFromNews ? '<span class="bg-blue-100 text-blue-700 text-xs px-2 py-1 rounded">TIN T·ª®C</span>' : ''}
                    </div>
                    <span class="px-2 py-1 text-xs rounded ${
                        emg.status === 'active' ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'
                    }">
                        ${emg.status === 'active' ? 'ƒêang x·ª≠ l√Ω' : 'ƒê√£ gi·∫£i quy·∫øt'}
                    </span>
                </div>
                <div class="flex items-center text-sm text-gray-600 mb-2">
                    <span class="mr-3">${icon}</span>
                    <span>${emg.address}</span>
                </div>
                <p class="text-sm text-gray-500 mb-3 line-clamp-2">${emg.description}</p>
                <div class="flex justify-between items-center text-xs">
                    <span class="text-gray-500">${emg.time}</span>
                    <button class="text-blue-600 hover:text-blue-800 font-medium flex items-center">
                        Chi ti·∫øt
                        <i data-feather="arrow-right" class="ml-1 w-3 h-3"></i>
                    </button>
                </div>
            </div>
        `;
    }).join('');
    
    feather.replace();
}

// üîπ H√†m h·ªó tr·ª£ (C·∫ßn l√† Global ƒë·ªÉ s·ª≠ d·ª•ng trong Leaflet Popup HTML)
window.shareEmergency = function(id) {
    const emergency = allInitialEmergencies.find(e => e.id === id);
    if (emergency && navigator.share) {
        navigator.share({
            title: `S·ª± c·ªë: ${emergency.name}`,
            text: `${emergency.name} - ${emergency.address}\n${emergency.description}`,
            url: window.location.href
        });
    } else {
        alert('Ch·ª©c nƒÉng chia s·∫ª kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ tr√™n thi·∫øt b·ªã n√†y.');
    }
}

window.viewEmergencyOnMap = function(id) {
    const emergency = allInitialEmergencies.find(e => e.id === id);
    if (emergency) {
        map.flyTo(emergency.coords, 15, { duration: 1.5 });
        // M·ªü popup t∆∞∆°ng ·ª©ng
        currentMarkers.forEach(marker => {
            const markerCoords = marker.getLatLng();
            if (markerCoords.lat === emergency.coords[0] && markerCoords.lng === emergency.coords[1]) {
                marker.openPopup();
            }
        });
    }
}

window.showEmergencyDetail = showEmergencyDetail;

// === EVENT LISTENERS ===
document.getElementById('type-filter').addEventListener('change', (e) => {
    currentFilters.type = e.target.value;
    drawMarkers();
});

document.getElementById('province-filter').addEventListener('change', (e) => {
    currentFilters.province = e.target.value;
    flyToProvince(e.target.value);
    drawMarkers();
});

document.getElementById('search-incidents').addEventListener('input', (e) => {
    currentFilters.search = e.target.value;
    drawMarkers();
});

document.getElementById('reset-filters').addEventListener('click', () => {
    currentFilters = { type: 'all', province: 'all', search: '' };
    document.getElementById('type-filter').value = 'all';
    document.getElementById('province-filter').value = 'all';
    document.getElementById('search-incidents').value = '';
    flyToProvince('all');
    drawMarkers();
});

// Click v√†o ch√∫ th√≠ch ƒë·ªÉ l·ªçc
document.querySelectorAll('[data-type]').forEach(item => {
    item.addEventListener('click', () => {
        currentFilters.type = item.dataset.type;
        document.getElementById('type-filter').value = currentFilters.type;
        drawMarkers();
    });
});

// Map controls
document.getElementById('locate-btn').addEventListener('click', () => {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(pos => {
            const lat = pos.coords.latitude;
            const lng = pos.coords.longitude;
            map.flyTo([lat, lng], 13, { duration: 1.5 });
            L.marker([lat, lng]).addTo(map)
                .bindPopup("üìç V·ªã tr√≠ c·ªßa b·∫°n")
                .openPopup();
        }, () => {
            alert("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p v·ªã tr√≠.");
        });
    } else {
        alert("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã!");
    }
});

document.getElementById('zoom-in-btn').addEventListener('click', () => { map.zoomIn(); });
document.getElementById('zoom-out-btn').addEventListener('click', () => { map.zoomOut(); });

// Modal Event Listeners
document.getElementById('close-modal').addEventListener('click', closeEmergencyDetail);
document.getElementById('modal-close-btn').addEventListener('click', closeEmergencyDetail);
document.getElementById('emergency-detail-modal').addEventListener('click', (e) => {
    if (e.target.id === 'emergency-detail-modal' || e.target.classList.contains('modal-overlay')) {
        closeEmergencyDetail();
    }
});

// Kh·ªüi t·∫°o
function initializeMap() {
    // ƒê·∫£m b·∫£o c√°c h√†m ph·ª• tr·ª£ c·∫ßn thi·∫øt cho Leaflet popup ƒë∆∞·ª£c khai b√°o tr∆∞·ªõc khi drawMarkers
    drawMarkers();
    updateStatistics();
    updateRecentIncidents();
}

initializeMap();
setInterval(updateStatistics, 30000); // C·∫≠p nh·∫≠t th·ªùi gian th·ª±c m·ªói 30 gi√¢y