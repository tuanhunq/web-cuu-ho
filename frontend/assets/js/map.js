
document.addEventListener("DOMContentLoaded", () => {
    // üîπ T·ªça ƒë·ªô trung t√¢m c√°c t·ªânh th√†nh
    const provinceCoordinates = {
        'hanoi': [21.0278, 105.8342],
        'hcm': [10.8231, 106.6297],
        'danang': [16.0544, 108.2022],
        'hue': [16.4637, 107.5909],
        'nghean': [18.6796, 105.6813],
        'thanhhoa': [19.8076, 105.7766],
        'haiphong': [20.8449, 106.6881],
        'cantho': [10.0452, 105.7469],
        'sonla': [21.3257, 103.9160],
        'ninhbinh': [20.2506, 105.9745]
    };

    // üîπ D·ªØ li·ªáu s·ª± c·ªë m·∫´u v·ªõi t·ªânh th√†nh
    const emergencies = [
        { id: 1, name: "Ch√°y nh√† d√¢n", address: "S·ªë 35 Tr·∫ßn H∆∞ng ƒê·∫°o, Ho√†n Ki·∫øm, H√† N·ªôi", coords: [21.027, 105.85], type: "fire", province: "hanoi", status: "active", time: "10 ph√∫t tr∆∞·ªõc" },
        { id: 2, name: "Ng·∫≠p l·ª•t khu d√¢n c∆∞", address: "Khu v·ª±c ƒê·ªãnh C√¥ng, Ho√†ng Mai, H√† N·ªôi", coords: [20.98, 105.84], type: "flood", province: "hanoi", status: "active", time: "25 ph√∫t tr∆∞·ªõc" },
        { id: 3, name: "Tai n·∫°n giao th√¥ng", address: "QL1A - Ph∆∞·ªùng T√¢n T·∫°o, B√¨nh T√¢n, TP.HCM", coords: [10.76, 106.62], type: "accident", province: "hcm", status: "resolved", time: "1 gi·ªù tr∆∞·ªõc" },
        { id: 4, name: "S·∫°t l·ªü ƒë·∫•t", address: "Huy·ªán M∆∞·ªùng La, S∆°n La", coords: [21.41, 104.11], type: "disaster", province: "sonla", status: "active", time: "2 gi·ªù tr∆∞·ªõc" },
        { id: 5, name: "Ch√°y r·ª´ng", address: "V∆∞·ªùn Qu·ªëc Gia C√∫c Ph∆∞∆°ng, Ninh B√¨nh", coords: [20.31, 105.61], type: "fire", province: "ninhbinh", status: "active", time: "3 gi·ªù tr∆∞·ªõc" },
        { id: 6, name: "Ng·∫≠p c·ª•c b·ªô", address: "ƒê∆∞·ªùng Nguy·ªÖn VƒÉn Linh, ƒê√† N·∫µng", coords: [16.06, 108.21], type: "flood", province: "danang", status: "resolved", time: "4 gi·ªù tr∆∞·ªõc" }
    ];

    // üó∫Ô∏è Kh·ªüi t·∫°o b·∫£n ƒë·ªì
    const map = L.map("map").setView([16.0471, 108.2068], 6);
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        maxZoom: 19,
        attribution: '&copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a>'
    }).addTo(map);

    let currentMarkers = [];
    let currentFilters = { type: 'all', province: 'all', search: '' };

    // üîπ H√†m c·∫≠p nh·∫≠t th·ªëng k√™
    function updateStatistics() {
        const active = emergencies.filter(e => e.status === 'active').length;
        const resolved = emergencies.filter(e => e.status === 'resolved').length;
        
        document.getElementById('active-incidents').textContent = active;
        document.getElementById('resolved-incidents').textContent = resolved;
        
        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng theo lo·∫°i
        document.querySelectorAll('[id^="count-"]').forEach(el => {
            const type = el.id.replace('count-', '');
            const count = emergencies.filter(e => e.type === type).length;
            el.textContent = count;
        });

        // C·∫≠p nh·∫≠t th·ªùi gian
        document.getElementById('last-update').textContent = new Date().toLocaleTimeString('vi-VN');
    }

    // üîπ H√†m l·ªçc s·ª± c·ªë
    function filterEmergencies() {
        return emergencies.filter(emg => {
            const typeMatch = currentFilters.type === 'all' || emg.type === currentFilters.type;
            const provinceMatch = currentFilters.province === 'all' || emg.province === currentFilters.province;
            const searchMatch = currentFilters.search === '' || 
                emg.name.toLowerCase().includes(currentFilters.search.toLowerCase()) ||
                emg.address.toLowerCase().includes(currentFilters.search.toLowerCase());
            
            return typeMatch && provinceMatch && searchMatch;
        });
    }

    // üîπ H√†m chuy·ªÉn ƒë·∫øn t·ªânh th√†nh
    function flyToProvince(provinceCode) {
        if (provinceCode === 'all') {
            // Tr·ªü v·ªÅ b·∫£n ƒë·ªì Vi·ªát Nam
            map.flyTo([16.0471, 108.2068], 6, {
                duration: 1.5,
                easeLinearity: 0.25
            });
        } else if (provinceCoordinates[provinceCode]) {
            // Bay ƒë·∫øn t·ªânh th√†nh c·ª• th·ªÉ
            const coords = provinceCoordinates[provinceCode];
            map.flyTo(coords, 11, {
                duration: 1.5,
                easeLinearity: 0.25
            });
            
            // Th√™m marker trung t√¢m t·ªânh
            const provinceMarker = L.marker(coords)
                .addTo(map)
                .bindPopup(`<b>${getProvinceName(provinceCode)}</b><br>ƒêang hi·ªÉn th·ªã s·ª± c·ªë trong khu v·ª±c`)
                .openPopup();
            
            // T·ª± ƒë·ªông x√≥a marker sau 3 gi√¢y
            setTimeout(() => {
                map.removeLayer(provinceMarker);
            }, 3000);
        }
    }

    // üîπ H√†m v·∫Ω marker
    function drawMarkers() {
        // X√≥a marker c≈©
        currentMarkers.forEach(marker => map.removeLayer(marker));
        currentMarkers = [];

        const filteredEmergencies = filterEmergencies();
        
        filteredEmergencies.forEach(emg => {
            const color = getColorByType(emg.type);
            const icon = getIconByType(emg.type);
            
            const marker = L.marker(emg.coords, {
                icon: L.divIcon({
                    html: `
                        <div class="relative">
                            <div class="w-10 h-10 bg-${color}-500 rounded-full flex items-center justify-center text-white shadow-lg border-2 border-white transform hover:scale-110 transition-transform cursor-pointer ${emg.status === 'resolved' ? 'opacity-70' : ''}">
                                <span class="text-lg">${icon}</span>
                            </div>
                            ${emg.status === 'active' ? '<div class="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>' : ''}
                        </div>
                    `,
                    className: 'custom-marker',
                    iconSize: [40, 40],
                    iconAnchor: [20, 20]
                })
            })
            .addTo(map)
            .bindPopup(`
                <div class="p-3 min-w-[250px]">
                    <div class="flex items-center mb-2">
                        <div class="w-6 h-6 bg-${color}-500 rounded-full flex items-center justify-center mr-2 text-white">
                            <span>${icon}</span>
                        </div>
                        <h4 class="font-bold text-gray-800">${emg.name}</h4>
                    </div>
                    <p class="text-sm text-gray-600 mb-2">${emg.address}</p>
                    <div class="flex justify-between items-center text-xs">
                        <span class="px-2 py-1 bg-${color}-100 text-${color}-700 rounded">${getTypeName(emg.type)}</span>
                        <span class="text-gray-500">${emg.time}</span>
                    </div>
                    <div class="mt-3 flex gap-2">
                        <button onclick="viewEmergencyDetail(${emg.id})" class="flex-1 bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm transition">
                            Chi ti·∫øt
                        </button>
                        <button onclick="shareEmergency(${emg.id})" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-sm transition">
                            Chia s·∫ª
                        </button>
                    </div>
                </div>
            `);

            currentMarkers.push(marker);
        });

        updateStatistics();
    }

    // üîπ H√†m h·ªó tr·ª£
    function getColorByType(type) {
        const colors = {
            fire: 'red', flood: 'blue', accident: 'orange', 
            disaster: 'purple'
        };
        return colors[type] || 'gray';
    }

    function getIconByType(type) {
        const icons = {
            fire: 'üî•', flood: 'üíß', accident: 'üöó', 
            disaster: 'üå™Ô∏è'
        };
        return icons[type] || '‚ö†Ô∏è';
    }

    function getTypeName(type) {
        const names = {
            fire: 'H·ªèa ho·∫°n', flood: 'Ng·∫≠p l·ª•t', accident: 'Tai n·∫°n', 
            disaster: 'Thi√™n tai'
        };
        return names[type] || 'Kh√°c';
    }

    function getProvinceName(code) {
        const names = {
            'hanoi': 'H√† N·ªôi',
            'hcm': 'TP. H·ªì Ch√≠ Minh',
            'danang': 'ƒê√† N·∫µng',
            'hue': 'Th·ª´a Thi√™n Hu·∫ø',
            'nghean': 'Ngh·ªá An',
            'thanhhoa': 'Thanh H√≥a',
            'haiphong': 'H·∫£i Ph√≤ng',
            'cantho': 'C·∫ßn Th∆°',
            'sonla': 'S∆°n La',
            'ninhbinh': 'Ninh B√¨nh'
        };
        return names[code] || code;
    }

    // üîπ Event Listeners
    document.getElementById('type-filter').addEventListener('change', (e) => {
        currentFilters.type = e.target.value;
        drawMarkers();
    });

    document.getElementById('province-filter').addEventListener('change', (e) => {
        currentFilters.province = e.target.value;
        flyToProvince(e.target.value);
        drawMarkers();
    });

    document.getElementById('search-incidents').addEventListener('input', (e) => {
        currentFilters.search = e.target.value;
        drawMarkers();
    });

    document.getElementById('reset-filters').addEventListener('click', () => {
        currentFilters = { type: 'all', province: 'all', search: '' };
        document.getElementById('type-filter').value = 'all';
        document.getElementById('province-filter').value = 'all';
        document.getElementById('search-incidents').value = '';
        flyToProvince('all');
        drawMarkers();
    });

    // Quick filter buttons
    document.querySelectorAll('.filter-quick').forEach(btn => {
        btn.addEventListener('click', () => {
            currentFilters.type = btn.dataset.type;
            document.getElementById('type-filter').value = currentFilters.type;
            drawMarkers();
        });
    });

    // Click v√†o ch√∫ th√≠ch ƒë·ªÉ l·ªçc
    document.querySelectorAll('[data-type]').forEach(item => {
        item.addEventListener('click', () => {
            currentFilters.type = item.dataset.type;
            document.getElementById('type-filter').value = currentFilters.type;
            drawMarkers();
        });
    });

    // Map controls
    document.getElementById('locate-btn').addEventListener('click', () => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(pos => {
                const lat = pos.coords.latitude;
                const lng = pos.coords.longitude;
                map.flyTo([lat, lng], 13, {
                    duration: 1.5
                });
                L.marker([lat, lng]).addTo(map)
                    .bindPopup("üìç V·ªã tr√≠ c·ªßa b·∫°n")
                    .openPopup();
            }, () => {
                alert("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p v·ªã tr√≠.");
            });
        } else {
            alert("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã!");
        }
    });

    document.getElementById('zoom-in-btn').addEventListener('click', () => {
        map.zoomIn();
    });

    document.getElementById('zoom-out-btn').addEventListener('click', () => {
        map.zoomOut();
    });

    // üîπ Kh·ªüi t·∫°o
    drawMarkers();
    updateStatistics();

    // C·∫≠p nh·∫≠t th·ªùi gian th·ª±c m·ªói 30 gi√¢y
    setInterval(updateStatistics, 30000);
});

// H√†m to√†n c·ª•c ƒë·ªÉ s·ª≠ d·ª•ng trong popup
function viewEmergencyDetail(id) {
    alert(`Xem chi ti·∫øt s·ª± c·ªë #${id}`);
    // C√≥ th·ªÉ m·ªü modal chi ti·∫øt ·ªü ƒë√¢y
}

function shareEmergency(id) {
    if (navigator.share) {
        navigator.share({
            title: 'Th√¥ng tin s·ª± c·ªë kh·∫©n c·∫•p',
            text: 'C√≥ s·ª± c·ªë kh·∫©n c·∫•p c·∫ßn h·ªó tr·ª£',
            url: window.location.href
        });
    } else {
        alert('Ch·ª©c nƒÉng chia s·∫ª kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£');
    }
}