

//map
console.log('News module loaded');


//index
// News functionality for Emergency Rescue System
// assets/js/news.js - Phi√™n b·∫£n d√†nh ri√™ng cho trang ch·ªß
console.log('News module loaded for homepage');

class NewsManager {
    constructor() {
        this.news = [];
        this.currentPage = 1;
        this.itemsPerPage = 8;
        this.init();
    }
    
    async init() {
        console.log('Initializing NewsManager...');
        await this.loadNews();
        this.renderNews();
        this.setupEventListeners();
        this.startAutoRefresh();
    }
    
    async loadNews() {
        try {
            console.log('Loading news data...');
            // Th·ª≠ load t·ª´ API tr∆∞·ªõc
            if (typeof ApiService !== 'undefined' && ApiService.getNews) {
                this.news = await ApiService.getNews();
            } else {
                // Fallback v·ªÅ mock data
                throw new Error('ApiService not available');
            }
        } catch (error) {
            console.log('Using mock news data:', error.message);
            this.news = this.getMockNews();
        }
        console.log(`Loaded ${this.news.length} news items`);
    }
    
    renderNews() {
        const newsGrid = document.getElementById('news-grid');
        if (!newsGrid) {
            console.error('News grid element not found!');
            return;
        }
        
        const startIndex = (this.currentPage - 1) * this.itemsPerPage;
        const endIndex = startIndex + this.itemsPerPage;
        const newsToShow = this.news.slice(startIndex, endIndex);
        
        console.log(`Rendering ${newsToShow.length} news items`);
        
        if (newsToShow.length === 0) {
            newsGrid.innerHTML = `
                <div class="col-span-full text-center py-12">
                    <i data-feather="file-text" class="w-12 h-12 text-gray-400 mx-auto mb-4"></i>
                    <p class="text-gray-500">Kh√¥ng c√≥ b·∫£n tin n√†o.</p>
                </div>
            `;
            feather.replace();
            return;
        }
        
        newsGrid.innerHTML = newsToShow.map(newsItem => this.createNewsCard(newsItem)).join('');
        feather.replace();
        
        // Th√™m hi·ªáu ·ª©ng xu·∫•t hi·ªán
        this.animateNewsCards();
    }
    
    createNewsCard(newsItem) {
        const timeAgo = this.formatTimeAgo(newsItem.publishedAt);
        const typeIcon = this.getTypeIcon(newsItem.type);
        const severityClass = this.getSeverityClass(newsItem.severity);
        
        return `
            <div class="news-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 opacity-0"
                 onclick="newsManager.openNewsModal(${newsItem.id})">
                <div class="relative">
                    <img src="${newsItem.image}" alt="${newsItem.title}" 
                         class="w-full h-48 object-cover" 
                         onerror="this.src='https://images.unsplash.com/photo-1583324113626-70df0f4deaab?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=80'">
                    <div class="absolute top-3 right-3 ${severityClass} px-2 py-1 rounded-full text-xs font-semibold text-white">
                        ${this.getSeverityLabel(newsItem.severity)}
                    </div>
                    <div class="absolute bottom-3 left-3 bg-black bg-opacity-70 text-white px-2 py-1 rounded text-xs">
                        ${typeIcon} ${this.getTypeLabel(newsItem.type)}
                    </div>
                </div>
                <div class="p-4">
                    <h3 class="font-bold text-lg mb-2 line-clamp-2 text-gray-800 leading-tight">${newsItem.title}</h3>
                    <p class="text-gray-600 text-sm mb-3 line-clamp-2 leading-relaxed">${newsItem.summary}</p>
                    <div class="flex justify-between items-center text-xs text-gray-500">
                        <span class="flex items-center">
                            <i data-feather="clock" class="w-3 h-3 mr-1"></i>
                            ${timeAgo}
                        </span>
                        <span class="flex items-center">
                            <i data-feather="map-pin" class="w-3 h-3 mr-1"></i>
                            ${newsItem.location}
                        </span>
                    </div>
                </div>
            </div>
        `;
    }
    
    animateNewsCards() {
        const cards = document.querySelectorAll('.news-card');
        cards.forEach((card, index) => {
            setTimeout(() => {
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });
    }
    
    formatTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffInSeconds = Math.floor((now - date) / 1000);
        
        if (diffInSeconds < 60) return 'V·ª´a xong';
        if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} ph√∫t tr∆∞·ªõc`;
        if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} gi·ªù tr∆∞·ªõc`;
        if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} ng√†y tr∆∞·ªõc`;
        
        return date.toLocaleDateString('vi-VN');
    }
    
    getTypeIcon(type) {
        const icons = {
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è',
            emergency: 'üö®',
            update: 'üì¢',
            fire: 'üî•',
            flood: 'üíß',
            accident: 'üöó',
            disaster: 'üå™Ô∏è',
            medical: 'üè•'
        };
        return icons[type] || 'üì∞';
    }
    
    getTypeLabel(type) {
        const labels = {
            warning: 'C·∫£nh b√°o',
            info: 'Th√¥ng tin',
            emergency: 'Kh·∫©n c·∫•p',
            update: 'C·∫≠p nh·∫≠t',
            fire: 'H·ªèa ho·∫°n',
            flood: 'Ng·∫≠p l·ª•t',
            accident: 'Tai n·∫°n',
            disaster: 'Thi√™n tai',
            medical: 'Y t·∫ø'
        };
        return labels[type] || 'Tin t·ª©c';
    }
    
    getSeverityClass(severity) {
        const classes = {
            critical: 'bg-red-600',
            high: 'bg-red-500',
            medium: 'bg-orange-500',
            low: 'bg-yellow-500',
            info: 'bg-blue-500'
        };
        return classes[severity] || 'bg-gray-500';
    }
    
    getSeverityLabel(severity) {
        const labels = {
            critical: 'Kh·∫©n c·∫•p',
            high: 'Cao',
            medium: 'Trung b√¨nh',
            low: 'Th·∫•p',
            info: 'Th√¥ng tin'
        };
        return labels[severity] || 'Kh√¥ng x√°c ƒë·ªãnh';
    }
    
    setupEventListeners() {
        console.log('Setting up event listeners...');
        
        // Modal close button
        const closeModal = document.getElementById('close-modal');
        if (closeModal) {
            closeModal.addEventListener('click', () => this.closeNewsModal());
        }
        
        // Modal backdrop click
        const modal = document.getElementById('news-modal');
        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closeNewsModal();
                }
            });
        }
        
        // Share button
        const shareBtn = document.getElementById('share-news');
        if (shareBtn) {
            shareBtn.addEventListener('click', () => this.shareCurrentNews());
        }
        
        // Escape key to close modal
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeNewsModal();
            }
        });
        
        console.log('Event listeners setup completed');
    }
    
    openNewsModal(newsId) {
        console.log('Opening news modal for ID:', newsId);
        const newsItem = this.news.find(item => item.id === newsId);
        if (!newsItem) {
            console.error('News item not found:', newsId);
            return;
        }
        
        const modal = document.getElementById('news-modal');
        const title = document.getElementById('modal-title');
        const content = document.getElementById('modal-content');
        const mapLink = document.getElementById('map-link');
        const relatedContainer = document.querySelector('#related-news .space-y-2');
        
        if (!modal || !title || !content) {
            console.error('Modal elements not found');
            return;
        }
        
        // Set modal content
        title.textContent = newsItem.title;
        content.innerHTML = this.createModalContent(newsItem);
        
        // Set map link
        if (mapLink && newsItem.coordinates) {
            mapLink.href = `map.html?lat=${newsItem.coordinates[0]}&lng=${newsItem.coordinates[1]}&zoom=15`;
            mapLink.style.display = 'inline-flex';
        } else {
            mapLink.style.display = 'none';
        }
        
        // Show related news
        if (relatedContainer) {
            const related = this.getRelatedNews(newsItem);
            relatedContainer.innerHTML = related.map(item => `
                <div class="flex items-center space-x-3 p-2 hover:bg-gray-50 rounded cursor-pointer transition-colors" 
                     onclick="newsManager.openNewsModal(${item.id})">
                    <img src="${item.image}" alt="${item.title}" 
                         class="w-12 h-12 object-cover rounded"
                         onerror="this.src='https://images.unsplash.com/photo-1583324113626-70df0f4deaab?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&q=80'">
                    <div class="flex-1 min-w-0">
                        <p class="text-sm font-medium text-gray-900 truncate">${item.title}</p>
                        <p class="text-xs text-gray-500">${this.formatTimeAgo(item.publishedAt)}</p>
                    </div>
                </div>
            `).join('');
        }
        
        // Show modal
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
        
        // Update Feather icons in modal
        feather.replace();
        
        // Track view
        this.trackNewsView(newsItem);
    }
    
    createModalContent(newsItem) {
        const formattedDate = new Date(newsItem.publishedAt).toLocaleDateString('vi-VN', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
        
        return `
            <div class="mb-4">
                <img src="${newsItem.image}" alt="${newsItem.title}" 
                     class="w-full h-64 object-cover rounded-lg"
                     onerror="this.src='https://images.unsplash.com/photo-1583324113626-70df0f4deaab?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80'">
            </div>
            <div class="flex items-center space-x-4 text-sm text-gray-600 mb-4 flex-wrap gap-2">
                <span class="flex items-center bg-gray-100 px-3 py-1 rounded-full">
                    <i data-feather="clock" class="w-4 h-4 mr-1"></i>
                    ${formattedDate}
                </span>
                <span class="flex items-center bg-gray-100 px-3 py-1 rounded-full">
                    <i data-feather="map-pin" class="w-4 h-4 mr-1"></i>
                    ${newsItem.location}
                </span>
                <span class="flex items-center ${this.getSeverityClass(newsItem.severity)} text-white px-3 py-1 rounded-full">
                    <i data-feather="alert-circle" class="w-4 h-4 mr-1"></i>
                    ${this.getSeverityLabel(newsItem.severity)}
                </span>
            </div>
            <div class="prose max-w-none text-gray-700 leading-relaxed">
                <p class="text-lg font-semibold mb-4 text-gray-900">${newsItem.summary}</p>
                ${newsItem.content ? `<div class="mt-4">${newsItem.content}</div>` : ''}
            </div>
            ${newsItem.affectedAreas ? `
                <div class="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <h4 class="font-semibold text-yellow-800 mb-2 flex items-center">
                        <i data-feather="alert-triangle" class="w-4 h-4 mr-2"></i>
                        Khu v·ª±c ·∫£nh h∆∞·ªüng
                    </h4>
                    <p class="text-yellow-700">${newsItem.affectedAreas}</p>
                </div>
            ` : ''}
            ${newsItem.safetyInstructions ? `
                <div class="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                    <h4 class="font-semibold text-blue-800 mb-2 flex items-center">
                        <i data-feather="shield" class="w-4 h-4 mr-2"></i>
                        H∆∞·ªõng d·∫´n an to√†n
                    </h4>
                    <p class="text-blue-700">${newsItem.safetyInstructions}</p>
                </div>
            ` : ''}
            ${newsItem.contactInfo ? `
                <div class="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
                    <h4 class="font-semibold text-green-800 mb-2 flex items-center">
                        <i data-feather="phone" class="w-4 h-4 mr-2"></i>
                        Th√¥ng tin li√™n h·ªá
                    </h4>
                    <p class="text-green-700">${newsItem.contactInfo}</p>
                </div>
            ` : ''}
        `;
    }
    
    getRelatedNews(currentNews) {
        return this.news
            .filter(item => 
                item.id !== currentNews.id && 
                (item.type === currentNews.type || item.location === currentNews.location)
            )
            .slice(0, 3);
    }
    
    closeNewsModal() {
        const modal = document.getElementById('news-modal');
        if (modal) {
            modal.classList.add('hidden');
            document.body.style.overflow = '';
        }
    }
    
    shareCurrentNews() {
        const modal = document.getElementById('news-modal');
        const title = document.getElementById('modal-title');
        
        if (!modal.classList.contains('hidden') && title) {
            const newsItem = this.news.find(item => item.title === title.textContent);
            if (newsItem) {
                this.shareNews(newsItem);
            }
        }
    }
    
    shareNews(newsItem) {
        const shareData = {
            title: newsItem.title,
            text: newsItem.summary,
            url: window.location.href
        };
        
        if (navigator.share) {
            navigator.share(shareData)
                .then(() => console.log('News shared successfully'))
                .catch(error => console.log('Error sharing news:', error));
        } else {
            // Fallback: copy to clipboard
            navigator.clipboard.writeText(shareData.url).then(() => {
                alert('ƒê√£ sao ch√©p li√™n k·∫øt v√†o clipboard');
            });
        }
    }
    
    trackNewsView(newsItem) {
        console.log('News viewed:', newsItem.title);
        // C√≥ th·ªÉ th√™m analytics tracking ·ªü ƒë√¢y
    }
    
    startAutoRefresh() {
        // T·ª± ƒë·ªông c·∫≠p nh·∫≠t tin m·ªõi m·ªói 2 ph√∫t
        setInterval(async () => {
            console.log('Auto-refreshing news...');
            const oldCount = this.news.length;
            await this.loadNews();
            
            if (this.news.length > oldCount) {
                console.log(`Found ${this.news.length - oldCount} new news items`);
                this.renderNews();
                this.showNewNewsNotification(this.news.length - oldCount);
            }
        }, 2 * 60 * 1000); // 2 ph√∫t
    }
    
    showNewNewsNotification(count) {
        // Hi·ªÉn th·ªã th√¥ng b√°o c√≥ tin m·ªõi
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-transform duration-300';
        notification.innerHTML = `
            <div class="flex items-center">
                <i data-feather="refresh-cw" class="w-4 h-4 mr-2"></i>
                <span>C√≥ ${count} b·∫£n tin m·ªõi</span>
                <button onclick="this.parentElement.parentElement.remove()" class="ml-2">
                    <i data-feather="x" class="w-4 h-4"></i>
                </button>
            </div>
        `;
        
        document.body.appendChild(notification);
        feather.replace();
        
        // T·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }
    
    getMockNews() {
        return [
            {
                id: 1,
                title: "C·∫£nh b√°o m∆∞a l·ªõn di·ªán r·ªông t·∫°i mi·ªÅn Trung",
                summary: "M∆∞a l·ªõn k√©o d√†i g√¢y ng·∫≠p l·ª•t nhi·ªÅu khu v·ª±c t·∫°i c√°c t·ªânh mi·ªÅn Trung, ng∆∞·ªùi d√¢n c·∫ßn ƒë·ªÅ ph√≤ng",
                content: "Theo Trung t√¢m D·ª± b√°o Kh√≠ t∆∞·ª£ng Th·ªßy vƒÉn Qu·ªëc gia, m∆∞a l·ªõn di·ªán r·ªông ƒëang x·∫£y ra t·∫°i c√°c t·ªânh mi·ªÅn Trung. L∆∞·ª£ng m∆∞a ph·ªï bi·∫øn t·ª´ 100-200mm, c√≥ n∆°i tr√™n 250mm. T√¨nh tr·∫°ng ng·∫≠p l·ª•t c·ª•c b·ªô c√≥ th·ªÉ x·∫£y ra t·∫°i c√°c khu v·ª±c tr≈©ng th·∫•p.",
                type: "flood",
                severity: "high",
                location: "Mi·ªÅn Trung",
                image: "https://images.unsplash.com/photo-1599058917765-7805dd3c0a56?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=80",
                publishedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
                coordinates: [16.047079, 108.206230],
                affectedAreas: "C√°c t·ªânh t·ª´ Th·ª´a Thi√™n Hu·∫ø ƒë·∫øn Kh√°nh H√≤a",
                safetyInstructions: "Ng∆∞·ªùi d√¢n h·∫°n ch·∫ø ra ƒë∆∞·ªùng, chu·∫©n b·ªã s·∫µn s√†ng ph∆∞∆°ng √°n s∆° t√°n, theo d√µi th√¥ng tin c·∫£nh b√°o",
                contactInfo: "ƒê∆∞·ªùng d√¢y n√≥ng: 024.382.218.83"
            },
            {
                id: 2,
                title: "H·ªèa ho·∫°n t·∫°i chung c∆∞ Qu·∫≠n 1, TP.HCM",
                summary: "ƒê√°m ch√°y b√πng ph√°t t·∫°i t·∫ßng h·∫ßm chung c∆∞ cao c·∫•p, l·ª±c l∆∞·ª£ng c·ª©u h·ªô ƒëang c√≥ m·∫∑t hi·ªán tr∆∞·ªùng",
                content: "M·ªôt v·ª• h·ªèa ho·∫°n ƒë√£ x·∫£y ra t·∫°i t·∫ßng h·∫ßm chung c∆∞ cao c·∫•p tr√™n ƒë∆∞·ªùng L√™ Du·∫©n, Qu·∫≠n 1. Nguy√™n nh√¢n ban ƒë·∫ßu ƒë∆∞·ª£c x√°c ƒë·ªãnh do ch·∫≠p ƒëi·ªán. L·ª±c l∆∞·ª£ng PCCC ƒë√£ c√≥ m·∫∑t v√† ƒëang n·ªó l·ª±c d·∫≠p l·ª≠a.",
                type: "fire",
                severity: "critical",
                location: "Qu·∫≠n 1, TP.HCM",
                image: "https://images.unsplash.com/photo-1560518883-ce09059eeffa?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=80",
                publishedAt: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),
                coordinates: [10.7769, 106.7009],
                safetyInstructions: "Ng∆∞·ªùi d√¢n xung quanh di chuy·ªÉn ra khu v·ª±c an to√†n, nh∆∞·ªùng ƒë∆∞·ªùng cho xe c·ª©u h·ªèa",
                contactInfo: "C·∫£nh s√°t PCCC: 114"
            },
            {
                id: 3,
                title: "Tai n·∫°n giao th√¥ng nghi√™m tr·ªçng tr√™n cao t·ªëc H√† N·ªôi - H·∫£i Ph√≤ng",
                summary: "Va ch·∫°m li√™n ho√†n gi·ªØa 5 xe √¥ t√¥, m·ªôt s·ªë ng∆∞·ªùi b·ªã th∆∞∆°ng",
                type: "accident",
                severity: "high",
                location: "H·∫£i Ph√≤ng",
                image: "https://images.unsplash.com/photo-1558618666-fcd25856cd63?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=80",
                publishedAt: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),
                coordinates: [20.8445, 106.6881],
                safetyInstructions: "C√°c ph∆∞∆°ng ti·ªán n√™n ch·ªçn tuy·∫øn ƒë∆∞·ªùng thay th·∫ø"
            },
            {
                id: 4,
                title: "C·∫≠p nh·∫≠t t√¨nh h√¨nh b√£o s·ªë 5",
                summary: "B√£o ƒëang di chuy·ªÉn v·ªõi s·ª©c gi√≥ m·∫°nh, d·ª± ki·∫øn ƒë·ªï b·ªô v√†o ƒë·∫•t li·ªÅn trong 24h t·ªõi",
                type: "disaster",
                severity: "critical",
                location: "V√πng bi·ªÉn ƒê√¥ng",
                image: "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=60",
                publishedAt: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),
                coordinates: [15.5, 112.0],
                affectedAreas: "C√°c t·ªânh t·ª´ Qu·∫£ng Ninh ƒë·∫øn Qu·∫£ng Ng√£i",
                safetyInstructions: "T√†u thuy·ªÅn v√†o n∆°i tr√∫ ·∫©n, ng∆∞·ªùi d√¢n ven bi·ªÉn s∆° t√°n"
            }
        ];
    }
}

// Kh·ªüi t·∫°o ngay khi DOM ready
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing news manager...');
    window.newsManager = new NewsManager();
});

// Fallback: kh·ªüi t·∫°o n·∫øu DOM ƒë√£ s·∫µn s√†ng
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
        window.newsManager = new NewsManager();
    });
} else {
    window.newsManager = new NewsManager();
}




// H√†m l·∫•y 4 tin m·ªõi nh·∫•t
function getLatestNews(count = 4) {
    return emergenciesData
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
        .slice(0, count);
}

// H√†m hi·ªÉn th·ªã tin t·ª©c l√™n grid (s·ª≠a l·∫°i)
function displayNews(newsArray, limit = null) {
    const newsGrid = document.getElementById('news-grid');
    
    if (!newsGrid) return;

    // Clear existing content
    newsGrid.innerHTML = '';

    // Hi·ªÉn th·ªã tin theo limit ho·∫∑c t·∫•t c·∫£
    const displayNews = limit ? newsArray.slice(0, limit) : newsArray;

    displayNews.forEach(emergency => {
        const newsCard = createNewsCard(emergency);
        newsGrid.appendChild(newsCard);
    });
    
    // Refresh feather icons
    feather.replace();
}





// H√†m fetch d·ªØ li·ªáu t·ª´ JSON
async function fetchLatestEmergencies() {
    try {
        const response = await fetch('data/emergencies.json');
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();
        return data.emergencies;
    } catch (error) {
        console.error('Error fetching emergencies data:', error);
        return [];
    }
}

// H√†m hi·ªÉn th·ªã 4 tin m·ªõi nh·∫•t
function displayLatestEmergencies(emergencies) {
    const grid = document.getElementById('latest-emergencies-grid');
    if (!grid) return;

    // L·∫•y 4 tin m·ªõi nh·∫•t
    const latestNews = emergencies
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
        .slice(0, 4);

    grid.innerHTML = '';

    latestNews.forEach(emergency => {
        const card = createEmergencyCard(emergency);
        grid.appendChild(card);
    });
    
    // Refresh feather icons
    if (typeof feather !== 'undefined') {
        feather.replace();
    }
}

// H√†m t·∫°o card tin kh·∫©n c·∫•p
function createEmergencyCard(emergency) {
    const card = document.createElement('div');
    card.className = 'bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-all duration-300 cursor-pointer border border-gray-200';
    
    // Map type to Vietnamese and colors
    const typeMap = {
        'fire': { name: 'H·ªèa ho·∫°n', color: 'red', icon: 'flame' },
        'flood': { name: 'Ng·∫≠p l·ª•t', color: 'blue', icon: 'droplet' },
        'accident': { name: 'Tai n·∫°n', color: 'orange', icon: 'activity' },
        'disaster': { name: 'Thi√™n tai', color: 'purple', icon: 'alert-octagon' },
        'medical': { name: 'Y t·∫ø', color: 'green', icon: 'heart' }
    };

    const typeInfo = typeMap[emergency.type] || { name: 'Kh·∫©n c·∫•p', color: 'gray', icon: 'alert-triangle' };
    
    // Format date
    const date = new Date(emergency.timestamp);
    const formattedDate = date.toLocaleDateString('vi-VN', {
        day: '2-digit',
        month: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });

    // Status badge
    const statusMap = {
        'active': { text: 'ƒêang x·ª≠ l√Ω', color: 'bg-red-100 text-red-800' },
        'resolved': { text: 'ƒê√£ gi·∫£i quy·∫øt', color: 'bg-green-100 text-green-800' },
        'warning': { text: 'C·∫£nh b√°o', color: 'bg-yellow-100 text-yellow-800' }
    };
    const statusInfo = statusMap[emergency.status] || { text: 'Kh√¥ng x√°c ƒë·ªãnh', color: 'bg-gray-100 text-gray-800' };

    card.innerHTML = `
        <div class="relative">
            <img src="${emergency.image}" alt="${emergency.title}" class="w-full h-40 object-cover">
            <div class="absolute top-2 left-2">
                <span class="px-2 py-1 ${statusInfo.color} rounded-full text-xs font-medium">
                    ${statusInfo.text}
                </span>
            </div>
            <div class="absolute top-2 right-2">
                <span class="px-2 py-1 bg-${typeInfo.color}-100 text-${typeInfo.color}-800 rounded-full text-xs font-medium flex items-center">
                    <i data-feather="${typeInfo.icon}" class="w-3 h-3 mr-1"></i>
                    ${typeInfo.name}
                </span>
            </div>
        </div>
        <div class="p-4">
            <h3 class="font-bold text-sm mb-2 text-gray-800 line-clamp-2 leading-tight">${emergency.title}</h3>
            <p class="text-gray-600 text-xs mb-3 line-clamp-2">${emergency.summary}</p>
            <div class="flex items-center justify-between text-xs text-gray-500">
                <div class="flex items-center">
                    <i data-feather="map-pin" class="w-3 h-3 mr-1"></i>
                    <span class="truncate">${emergency.location.split(',')[0]}</span>
                </div>
                <div class="flex items-center">
                    <i data-feather="clock" class="w-3 h-3 mr-1"></i>
                    <span>${formattedDate}</span>
                </div>
            </div>
            ${emergency.casualties > 0 ? `
                <div class="mt-2 p-2 bg-red-50 rounded text-xs text-red-700 flex items-center">
                    <i data-feather="alert-triangle" class="w-3 h-3 mr-1"></i>
                    <span>${emergency.casualties} ng∆∞·ªùi b·ªã th∆∞∆°ng</span>
                </div>
            ` : ''}
        </div>
    `;

    // Add click event to redirect to request page
    card.addEventListener('click', () => {
        window.location.href = `request.html#emergency-${emergency.id}`;
    });

    return card;
}

// H√†m kh·ªüi t·∫°o
async function initLatestNews() {
    try {
        const emergencies = await fetchLatestEmergencies();
        displayLatestEmergencies(emergencies);
    } catch (error) {
        console.error('Error initializing latest news:', error);
        
        // Fallback: Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        const grid = document.getElementById('latest-emergencies-grid');
        if (grid) {
            grid.innerHTML = `
                <div class="col-span-4 text-center py-8">
                    <i data-feather="alert-circle" class="w-12 h-12 text-gray-400 mx-auto mb-4"></i>
                    <p class="text-gray-500">Kh√¥ng th·ªÉ t·∫£i tin kh·∫©n c·∫•p. Vui l√≤ng th·ª≠ l·∫°i sau.</p>
                </div>
            `;
            if (typeof feather !== 'undefined') {
                feather.replace();
            }
        }
    }
}

// Kh·ªüi ch·∫°y khi DOM loaded
document.addEventListener('DOMContentLoaded', initLatestNews);